# Automatically generated by hassfest.
#
# To update, run python3 -m script.hassfest -p docker
ARG BUILD_FROM=ghcr.io/home-assistant/home-assistant@sha256:835fc94ca52e2176a3b641bacf38fb703115ccce2d45a241111a72c49abbd595
FROM ${BUILD_FROM}

# Synchronize with homeassistant/core.py:async_stop
ENV \
    S6_SERVICES_GRACETIME=240000 \
    UV_SYSTEM_PYTHON=true \
    UV_NO_CACHE=true

ARG QEMU_CPU

# Install uv
RUN pip3 install uv==0.6.1

WORKDIR /usr/src

## Setup Home Assistant Core dependencies
COPY requirements.txt homeassistant/
COPY homeassistant/package_constraints.txt homeassistant/homeassistant/
RUN \
    uv pip install \
        --no-build \
        -r homeassistant/requirements.txt

COPY requirements_all.txt home_assistant_frontend-* home_assistant_intents-* homeassistant/
RUN \
    if ls homeassistant/home_assistant_*.whl 1> /dev/null 2>&1; then \
        uv pip install homeassistant/home_assistant_*.whl; \
    fi \
    && uv pip install \
        --no-build \
        -r homeassistant/requirements_all.txt

## Setup Home Assistant Core
COPY . homeassistant/
RUN \
    uv pip install \
        -e ./homeassistant \
    && python3 -m compileall \
        homeassistant/homeassistant

# Remove default FFmpeg (if present)
RUN apk --no-cache del ffmpeg || true

# Install custom FFmpeg based on the platform
RUN uname -m > /tmp/arch \
    && cat /tmp/arch \
    && if [ "$(cat /tmp/arch)" = "armv7l" ]; then \
        curl -Lf -o /tmp/ffmpeg.tar.gz https://github.com/homebridge/ffmpeg-for-homebridge/releases/latest/download/ffmpeg-alpine-arm32v7.tar.gz \
        && ls -lh /tmp/ffmpeg.tar.gz \
        && tar xzf /tmp/ffmpeg.tar.gz -C / --no-same-owner; \
    elif [ "$(cat /tmp/arch)" = "aarch64" ]; then \
        curl -Lf -o /tmp/ffmpeg.tar.gz https://github.com/homebridge/ffmpeg-for-homebridge/releases/latest/download/ffmpeg-alpine-aarch64.tar.gz \
        && ls -lh /tmp/ffmpeg.tar.gz \
        && tar xzf /tmp/ffmpeg.tar.gz -C / --no-same-owner; \
    elif [ "$(cat /tmp/arch)" = "x86_64" ]; then \
        curl -Lf -o /tmp/ffmpeg.tar.gz https://github.com/homebridge/ffmpeg-for-homebridge/releases/latest/download/ffmpeg-alpine-x86_64.tar.gz \
        && ls -lh /tmp/ffmpeg.tar.gz \
        && tar xzf /tmp/ffmpeg.tar.gz -C / --no-same-owner; \
    else \
        echo "Unsupported architecture"; exit 1; \
    fi

# Ensure /usr/local/bin is in PATH
RUN echo 'export PATH=$PATH:/usr/local/bin' >> /etc/profile \
    && echo 'export PATH=$PATH:/usr/local/bin' >> ~/.profile

RUN apk add nodejs npm nano cpulimit

# Copy the pyhap folder to site-packages
COPY pyhap /usr/local/lib/python3.13/site-packages/pyhap
COPY frontend /usr/src/homeassistant/

# If you need to set permissions, you can do that here
RUN chmod -R 755 /usr/local/lib/python3.13/site-packages/pyhap

# Home Assistant S6-Overlay
COPY rootfs /

# Copy the script to the container
COPY run_after_start.sh /usr/local/bin/run_after_start.sh

# Give execute permissions
RUN chmod +x /usr/local/bin/run_after_start.sh

WORKDIR /config

# Run the script after the container starts, in the background
ENTRYPOINT ["/bin/bash", "-c", "/usr/local/bin/run_after_start.sh & exec python3 -m homeassistant --config /config"]
